# serverless.yml
service: ryanproject

provider:
  name: aws
  runtime: nodejs8.10
  region: us-west-2
  stage: ${opt:stage, "development"}

  environment:
    AQUARIUM_TABLE: ${self:provider.stage}-aquariumTable


  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.AQUARIUM_TABLE}"

#lambdas 
functions: 
  getTemperature:
    handler: source/getTemperature.handler
    events:
      - http:
          path: getTemperature/{aquariumId}
          method: get
          cors: true

  getAquaFlag:
    handler: source/getAquaFlag.handler
    events:
      - http:
          path: getAquaFlag/{aquariumId}
          method: get
          cors: true

#dynamos
resources:
  Resources:
    activeTournamentKeys:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AQUARIUM_TABLE}
        AttributeDefinitions:
          - AttributeName: aquariumId
            AttributeType: S
        KeySchema:
          - AttributeName: aquariumId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
   